-- MilkOS OWNED AND MAINTAINED BY Milk_man_3000

-- Variables
local coreVersion = "Alpha 0.1";
local isBeta = true;

-- Functions
function checkApiAndLoad(path)
 if fs.exists(path) == true then
  term.setTextColor(colors.pink);
  write("[APIS] API ".. path .. " finded, ".. fs.getSize(path).. "b on HDD, reading... ");
  term.setTextColor(colors.green);
  os.loadAPI(path);
  print("done");
  term.setTextColor(colors.white);
 else
  term.setTextColor(colors.red);
  print("[ !! ] API ".. path .. " not found, loading canceled!");
  term.setTextColor(colors.white);
 end
end

function unloadApi(path)
 term.setTextColor(colors.pink);
 write("[APIS] API ".. path .." is in unloading... ");
 if fs.exists(path) == true then
  term.setTextColor(colors.green);
  print("done");
  term.setTextColor(colors.white);
 else
  term.setTextColor(colors.red);
  print("failed!");
  term.setTextColor(colors.white);
 end
end

-- Core Main
term.clear();
term.setCursorPos(1, 1);
-- Put your APIS here:
checkApiAndLoad("/milkos/apis/messages");
checkApiAndLoad("/milkos/apis/stringapi");
checkApiAndLoad("/milkos/apis/filesystem");
-- End of APIS list to load

messages.info(fs.getFreeSpace("/") .. "b free on HDD");

-- Begin console
messages.info("Begin Console on computer ".. os.getComputerID() .. " at ".. os.clock());

if isBeta == true then
 messages.warn("This is the ".. coreVersion .. " version of MilkOS");
end
while true do
 write(os.getComputerID() .. "@/" .. shell.dir() .. ">");
 local commandCore = read();
 local commandArgs = stringapi.split(commandCore, " ");
 if commandArgs[1] == "apis" then
  if commandArgs[2] == nil then
   print("Usage: apis [load|unload] <path>");
   else if commandArgs[2] == "load" then
    if commandArgs[3] == nil then
	 messages.suggest("Please put a valid API path on argument 3.");
	else
	 checkApiAndLoad(commandArgs[3]);
	end
	else if commandArgs[2] == "unload" then
	 if commandArgs[3] == nil then
	  messages.suggest("Please put a valid API path on argument 3.");
	 else
	  unloadApi(commandArgs[3]);
	 end
     else if commandArgs[2] ~= nil then
      messages.suggest("Please put a valid command. You can put 'apis' to see the help.");
	 end
	end
   end
  end
  else if commandArgs[1] == "wget" then
   if commandArgs[2] == nil then
    print("Usage: wget <url> <path>");
   else
	if commandArgs[3] == nil then
	 print("Usage: wget ".. commandArgs[2] .. " <path>");
	else
	 messages.info("Checking \"".. commandArgs[2] .. "\"...");
	 local success, message = http.checkURL(commandArgs[2]);
	 if not success then
	  messages.warn("The URL is invalid: ".. message);
	 else
	  messages.work("Downloading ".. commandArgs[2] .. " on " .. commandArgs[3].. "...");
	  local fileGet = http.get(commandArgs[2]);
	  messages.info("Reading URL file...");
	  local fileOut = fileGet.readAll();
	  local fileWrt = fs.open(commandArgs[3], "w");
	  messages.work("Writing on \"" .. commandArgs[3] .. "\"");
	  fileWrt.write(fileOut);
	  fileWrt.close();
	  messages.done("Writing on \"" .. commandArgs[3] .. "\" done.");
	 end
	end
   end
  else if commandArgs[1] == "dir" or commandArgs[1] == "ls" then
    if commandArgs[2] == nil then
	 print("Directory of \"/".. shell.dir() .. "\"");
	 filesystem.listFiles(shell.dir());
    else
	 print("Directory of \"/".. commandArgs[2] .. "\"");
	 filesystem.listFiles(commandArgs[2]);
    end
    else if commandArgs[1] == "cd" then
     local newPath = shell.resolve(commandArgs[2]);
     if fs.isDir(newPath) and fs.exists(newPath) then
	  shell.setDir(newPath);
	  messages.done("Successfuly changed to \"/".. shell.dir() .. "\"");
     else
  	  messages.suggest("Please enter a valid directory.");
     end
	 else if commandArgs[1] == "isd" then
	  local pathToIsDir = shell.resolve(commandArgs[2]);
	  if commandArgs[2] == nil then
	   print("Usage: isd <path>");
	  else
	   if fs.exists(pathToIsDir) then
	     if fs.isDir(pathToIsDir) == true then
	     messages.info(commandArgs[2] .. " is a dir.");
	    else
	     messages.info(commandArgs[2] .. " is not a dir.");
	    end
	   else
	    messages.suggest("Please enter a existing directory.");
	   end
	  end
	  else if commandArgs[1] == "cat" then
	   local pathToCat = shell.resolve(commandArgs[2]);
	   if commandArgs[2] == nil then
	    print("Usage: cat <path>");
	    else if fs.exists(pathToCat) and fs.isDir(pathToCat) == false then
		 local fileHeader = fs.open(pathToCat, "r");
		 local fileContet = fileHeader.readAll();
		 print(fileContet);
		 fileHeader.close();
		else
		 messages.suggest("Not a valid path, or is a directory.");
	    end
	   end
	   else if commandArgs[1] == "ver" then
	    if isBeta == true then
		 print("Bundu ".. coreVersion .. " - BÃªta devloppement.");
		else
		 print("Bundu ".. coreVersion);
		end
		else if commandArgs[1] == "del" or commandArgs[1] == "rm" then
		 if commandArgs[2] == nil then
		  messages.suggest("Please enter a path/file to trash.");
		 else
		  local destroyPath = shell.resolve(commandArgs[2]);
		  messages.work("Deleting \"/" .. destroyPath .. "\"...");
		  fs.delete(destroyPath);
		  messages.done("Deleted \"/" .. destroyPath .. "\".");
		 end
		 else if commandArgs[1] == "clear" or commandArgs[1] == "cls" then
		  term.clear();
		  term.setCursorPos(1, 1);
		  else if commandArgs[1] == "write" then
		   if commandArgs[2] == nil then
		    print("Usage: write <path> <text_to_write>");
		    else if commandArgs[3] == nil then
			 print("Usage: write ".. commandArgs[2] .. " <text_to_write>");
		    else
		     local pathToWrite = shell.resolve(commandArgs[2]);
		     messages.work("Writing \"" .. commandArgs[3] .. "\" on \"" .. pathToWrite .. "\".");
			 local fileWriter = fs.open(pathToWrite, "w");
			 fileWriter.write(commandArgs[3]);
			 fileWriter.close();
			 messages.done("Writed \"" .. commandArgs[3] .. "\" on \"" .. pathToWrite .. "\".");
		    end
		   end
		  end
		 end
		end
 	   end
	  end
	 end
	end
   end
  end
 end
end